#+TITLE: On practical Event Sourcing in Clojure
#+ID: ev-so-clj
#+DATE: 2017/09/11
* What is event sourcing?
A traditional developemtn approach stores the application's current state. This is often what we want and all we need, but there are also times when we want to know more than just what the present can tell us.
In event sourcing, every change to the state of the application is captures as an event, and the current state of the application can be rebuilt from knowledge of these events.
This is a common approach in the real world:
- ships
- doctors
- and accountants
all store records like these. They do this because history can give us a greater understanding of the present. A childhood diagnosis might give insight into present symptoms, and neither you nor the tax man would be happy if your bank only stored your current balance.
** Shipping
Looking at a particular use case in the domain of shipping, perhaps at some point we want to know how often ships dock in each port. Knowing the current position of each ship will not help us. We could start recording dockings from today, but it could be some time before we could be confident that our result would match one measured over a longer time period.
The ships themselves maintain a detailed history which includes information about where the ship has docked. With access to this information, we could answer immediately, knowing that it's based on information collected over the lifetime of the system. Event sourcing has allowed us to answer a question we didn't know we would have to answer.
The other half of event sourcing is being able to rebuild the current state from the list of events. This is equivalent to calculating the current position of ships on the basis of bearing and speeds, though this has largely been superceded in modern times by the advent of GPS.
** Warehousing
Enough about shipping, for the remainder of this article, I will use warehousing as the domain, follwoing the example of Greg Yound in his SimpleCQRS project. The aggregate is an inventory item which should be understood as a "line" or "product", as opposed to a single instance of that "product".
* What does an event look like?
An event is [[https://en.wikipedia.org/wiki/Passive_data_structure][plain old data]], identified by a unique ID, and event type, a domain object or aggregate id, and any extra information needed to understand the state change that occured.
#+BEGIN_SRC clojure
{:event/id 326
 :event/type :event.type/item-renamed
 :item/id 42
 :item/name "Red gourd"}
#+END_SRC
This event tells us that item 42 was renamed to "Red gourd". *NB* the event id is unique amongst events, the item id should refer to an extant item, unless it creates the item, and the name of the event type should be in the past tense signifying that an event is something that has happened, and ditinguishing them from similiar structures such as Commands.
* What does an aggregate look like?
An aggregate is an entity and so it requires a unique id. It also contains domain-specific information, which in this case means:
- the name of the item
- whether the item is active
- its count
The final entry, =:event/changes=, is something I'll come back to later.
#+BEGIN_SRC clojure
{:item/id 42
 :item/name "Red gourd"
 :item/active? true
 :item/count 5
 :event/changes []}
#+END_SRC
* Applying events
*Applying an event* means changing the state of the aggregate, in line with the information of an event.
The function =apply-event= will take the aggregate and event, returning the updated aggregate.
We could use a normal function, but if we want different behaviour for different event types, we can make use of Clojure's [[https://clojure.org/reference/multimethods][multimethods]]. Our dispatch value will be the event type.

#+BEGIN_SRC clojure
(defmulti apply-event
  (fn [_ event]
    (:event/type event))

(defmethod apply-event
  :event.type/item-created
  [item event]
  (let [{:keys [:item/id]} event]
    {:item/id id
     :item/activated? true}))

(defmethod apply-event
  :event.type/item-renamed
  [item event]
  (let [m (select-keys event [:item/name])]
    (merge item m)))
#+END_SRC

A nice idiom for this process of moving key-value pairs from one map to another uses [[https://clojuredocs.org/clojure.core/select-keys][select-keys]] and [[https://clojuredocs.org/clojure.core/merge][merge]], particularly where you want to move several kvs or where some have conflicting short form names.
* Loading an aggregate
In creating my =apply-event= function, the order of arguments was chosen specifically to be =[aggregate event]=, because functions that take arguments =[X Y]= and return =X= can be used with [[https://clojuredocs.org/clojure.core/reduce][=reduce=]]. If we want to apply a list of events to a aggregate all at once, we can use:
#+BEGIN_SRC clojure
(reduce apply-event aggregate events)
#+END_SRC
And, as long as the first event can be applied to a =nil= aggregate (in effect, creating the aggregate), then we can rebuild an aggregate from scratch as so:
#+BEGIN_SRC clojure
(reduce apply-event nil events)
#+END_SRC
This is how we will rebuild aggregates from the events that we have saved. This function is called =load-from-history=, and given events it returns an aggregate.
#+BEGIN_SRC clojure
(defn load-from-history
  [events]
  (reduce apply-event nil events))
#+END_SRC
This function is the kernel of what we mean when we say "event sourcing".
* Aggregate behaviours
One of the key dogmas is that the state of the application can only change through applying an event. Therefore, if we want to write a function that changes the name of the aggregate, it does so by first creating and applying an event. The event also needs to be tagged on to the aggregate so that it can be saved at a later point, this is the purpose of the =:event/changes= entry that we saw earlier. This whole process is called "raising an event".
#+BEGIN_SRC clojure
(defn append-event
  [item event]
  (update item :event/changes
    #(concat % [event])))

(defn raise
  [item event]
  (-> item
      (append-event event)
      (apply-event event)))

(defn create
  [item id name]
  (if (empty? name)
    (throw (Exception. "New name is empty."))
    (raise item {:event/type :event.type/item-created
                 :item/id id
                 :item/name name})))

(defn rename
  [item name]
  (let [{:keys [:item/id]} item]
    (if (empty? name)
      (throw (Exception. "New name is empty."))
      (raise item {:event/type :event.type/item-renamed
                   :item/id id
                   :item/name name})))
#+END_SRC
*NB* domain behaviours, such as =create= and =rename= are where domain/business logic should be kept. The example here throws an exception if someone attempts to create or rename the item with an empty name.
* Saving aggregates
I won't describe how to persist events here, as your choice of storage is very much up to you. Both SQL databases and purpose made event stores such as Greg Young's [[https://geteventstore.com/][Event Store]] will get you there. See the following section on streams for important implementation details.
An aggregate repository will have two functions, =get-by-id= and =save=. Assuming that you have two functions =get-events= and =save-events= that interact with your DB:

#+BEGIN_SRC clojure
(defn get-by-id
  [id]
  (load-from-history (get-events id))

(defn save
  [item]
  (let [{:keys [:item/id :event/changes]} item]
    (save-events id changes)))
#+END_SRC
** Streams
Event Store has the concept of a stream which is similar to a table in an RDB. A useful rule to follow is that streams and aggregates should have a one-to-one correspondance, and so a stream should contain all the events for a single aggregate, and the name of the stream should be the type of aggregate followed by its ID. In our case, this would be "item-42".
This is not a hard and fast rule, and you might find that other approaches fit your use case better.
To convert between stream ids and aggregate ids:
#+BEGIN_SRC clojure
(def stream-prefix "item-")

(defn remove-prefix
  "Removes prefix if possible, returns the original string if not."
  [string prefix]
  (str/replace string (re-pattern (str "^" prefix)) ""))

(defn s->a [stream-id]
  "Converts a stream id into an aggregate id."
  (let [id (remove-prefix stream-id stream-prefix)]
    (if (= id stream-id)
      (throw (Exception. "Invalid stream id."))
      id)))

(defn a->s [id]
  "Converts an aggregate id into a stream id."
  (str stream-prefix id))
#+END_SRC
* The difference between a command and an event
An event is a statement that something happened, and that the state of an aggregate changed. A command is an instruction to the application to do something. Because of this, events have a name in the past tense "item renamed", whilst a command will have an imperative name, "rename item".
A commmand will not be necessarily successful as the application can reject them. Our domain might have a rule that no two items can have the same name, and if a command is received that instructs us to rename an item to an existing name we can throw an exception and not change the state of the aggregate. Commands should be seen as external, and not neccessarily knowing what effect they will have on the application.
** How do we receive commands?
There are many ways in which our application can receive commands. One that will be familiar to reader is REST, where HTTP endpoints can be used to create commands. Another that will be less familiar is an event subscription; external events are received by the application which then sends commands to the command handler. The Event Store documentation has more information on [[http://docs.geteventstore.com/introduction/4.0.0/subscriptions/][subscriptions]].
* The command handler
A command arrives at the command handler. The command handler has a single external function, =handle=. Its purpose is to retrieve the aggregate from the repository, call one or more behaviours of the aggregate, and then to save it.
In good functional programming practice, I have separated the IO and pure parts of this operation. =handle-pure= is a pure function which is passed the aggregate so that it doesn't need to interact with the repository, and returns the aggregate so that it can be saved.
Separating IO and pure code is useful if only because it means that we can write unit tests for =handle-pure= that don't require a connection to a database.
#+BEGIN_SRC clojure
(defmulti handle-pure
  (fn [item command]
    (:command/type command)))

(defn handle
  [command]
  (let [{:keys [:item/id]} command
        item (get-by-id id)]
    (-> item
        (handle-pure command)
        save)))

(defmethod handle-pure
  :command.type/create-item
  [item command]
  (let [{:keys [:item/id :item/name]} command]
    (if (nil? agg)
      (create item id name)
      item)

(defmethod handle-pure
  :command.type/rename-item
  [item command]
  (let [{:keys [:item/name]} command]
    (rename item name))
#+END_SRC
Just like with =apply-event=, we dispatch based on the type of command we receive. And although here, one command corresponds to one domain object behaviour, a command could cause several to be called.
* Namespacing
For a guide to how to namespace this, see my project [[https://github.com/DCPRevere/Demense][Demense]] which although not a exact replication of this code, follows it quite closely.
* Thanks
I owe thanks to [[https://github.com/riccardone][Riccardone]] for teaching me Event Sourcing, and to Greg Young for his [[https://github.com/gregoryyoung/m-r][SimpleCQRS]] project, which guided much of my development.
